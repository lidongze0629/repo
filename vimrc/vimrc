set nocompatible
set backspace=indent,eol,start
filetype off

" ----------------------------------------------------
" 插件部分
" git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
" ----------------------------------------------------
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'altercation/vim-colors-solarized'
Plugin 'Lokaltog/vim-powerline'
Plugin 'octol/vim-cpp-enhanced-highlight'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'derekwyatt/vim-fswitch'
Plugin 'kshenoy/vim-signature'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'majutsushi/tagbar'
Plugin 'vim-scripts/indexer.tar.gz'
Plugin 'vim-scripts/DfrankUtil'
Plugin 'vim-scripts/vimprj'
Plugin 'fholgado/minibufexpl.vim'
call vundle#end()
filetype plugin indent on

" 前缀键 对应后面的<Leader>
let mapleader=";"

" 开启文件类型侦测
filetype on
" 根据侦测到的不同类型加载对应的插件
" 比如c++ 与 python的语法高亮不同
filetype plugin on

" 定义快捷键到行首和行尾
nmap LB 0
nmap LE $
" 设置快捷键将选中文本块复制至系统剪贴板
vnoremap <Leader>y "+y
" 设置快捷键将系统剪贴板内容粘贴至 vim
nmap <Leader>p "+p
" 定义快捷键关闭当前分割窗口
nmap <Leader>q :q<CR>
" 定义快捷键保存当前窗口内容
nmap <Leader>w :w<CR>
" 定义快捷键保存所有窗口内容并退出 vim
nmap <Leader>WQ :wa<CR>:q<CR>
" 不做任何保存，直接退出 vim
nmap <Leader>Q :qa!<CR>
" 依次遍历子窗口
nnoremap nw <C-W><C-W>
" 跳转至右方的窗口
nnoremap <Leader>lw <C-W>l
" 跳转至左方的窗口
nnoremap <Leader>hw <C-W>h
" 跳转至上方的子窗口
nnoremap <Leader>kw <C-W>k
" 跳转至下方的子窗口
nnoremap <Leader>jw <C-W>j
" 定义快捷键在结对符之间跳转
nmap <Leader>M %

" 实时保证保存本文件，最新效果立即生效
" 省去了关闭本文件，在打开的操作
autocmd BufWritePost $MYVIMRC source $MYVIMRC

" 下面这个四个不能删除，有些插件用到了
" 开启实时搜索功能
set incsearch
" 搜索时大小写不敏感
set ignorecase
" 关闭兼容模式
set nocompatible
" vim 自身命令行模式智能补全
set wildmenu

" 配色方案 主题
set background=dark
colorscheme solarized

" ----------------------------------------------------
" 状态栏操作
" ----------------------------------------------------
" 总是显示状态栏
set laststatus=2
" 显示光标当前位置
set ruler
" 开启行号显示
set number
" 高亮显示当前行/列
" set cursorline
" set cursorcolumn
" 高亮显示搜索结果
set hlsearch

" ----------------------------------------------------
" 语法高亮 比如 void struct class
" 但是该处不支持 比如vector unordered_map等特有结构
"
" 上述插件中vim-cpp-enhanced-highlight 实现了该功能
" 文件.vim/bundle/vim-cpp-enhanced-highlight/after/syntax/cpp.vim
" 进行控制，如果initializer_list 默认并不会高亮
" 我们只需要设置 syntax keyword cppSTLtype initializer_list 即可
" ----------------------------------------------------
" 开启语法高亮功能
syntax enable
" 允许用指定语法高亮配色方案替换默认方案
syntax on

" ----------------------------------------------------
" 缩紧功能
" ----------------------------------------------------
" 自适应不同语言的智能缩进
filetype indent on
" 将制表符扩展为空格
set expandtab
" 设置编辑时制表符占用空格数
set tabstop=4
" 设置格式化时制表符占用空格数
set shiftwidth=4
" 让 vim 把连续数量的空格视为一个制表符
set softtabstop=4

" ----------------------------------------------------
" 将缩紧功能显示出来，更直观
" ----------------------------------------------------
colorscheme default
" 随 vim 自启动
let g:indent_guides_enable_on_vim_startup = 1
" 从第二层开始可视化显示缩进
let g:indent_guides_start_level=2
" 色块宽度
let g:indent_guides_guide_size=1
" 快捷键 i 开/关缩进可视化
:nmap <silent> <Leader>i <Plug>IndentGuidesToggle

" ----------------------------------------------------
" 代码折叠功能
" ----------------------------------------------------
" 代码折叠 za: 打开或关闭当前折叠 
" zM: 关闭所有折叠
" zR: 打开所有折叠
" 基于缩进或语法进行代码折叠
"set foldmethod=indent
set foldmethod=syntax
" 启动 vim 时关闭折叠代码
set nofoldenable

" ----------------------------------------------------
" cpp h 文件之间的转换
" ----------------------------------------------------
" *.cpp 和 *.h 间切换
" 快捷键 是 <leader>sw
" au!
au BufEnter *.h let b:fswitchdst  = 'cpp,cc,C'
au BufEnter *.h let b:fswitchlocs = 'reg:/include/src/,reg:/include.*/src/'
au BufEnter *.cc let b:fswitchdst = 'h'
let b:fswitchlocs = 'reg:|src|include/**|'
nmap <silent> <Leader>sw :FSHere<cr>

" nnoremap <leader>jc :YcmCompleter GoToDeclaration<CR>
" 只能是 #include 或已打开的文件
" nnoremap <leader>jd :YcmCompleter GoToDefinition<CR>

" ----------------------------------------------------
" 目录树
" ----------------------------------------------------
" 使用 NERDTree 插件查看工程文件。设置快捷键，速记：file list
nmap <Leader>' :NERDTreeToggle<CR>
" 设置NERDTree子窗口宽度
let NERDTreeWinSize=32
" 设置NERDTree子窗口位置
let NERDTreeWinPos="left"
" 显示隐藏文件
let NERDTreeShowHidden=1
" NERDTree 子窗口中不显示冗余帮助信息
let NERDTreeMinimalUI=1
" 删除文件时自动删除文件对应 buffer
let NERDTreeAutoDeleteBuffer=1
" ^G remove
let g:NERDTreeNodeDelimiter = "\u00a0"

" ----------------------------------------------------
" 独立书签功能
" ----------------------------------------------------
" 独立书签
let g:SignatureMap = {
        \ 'Leader'             :  "m",
        \ 'PlaceNextMark'      :  "m,",
        \ 'ToggleMarkAtLine'   :  "m.",
        \ 'PurgeMarksAtLine'   :  "m-",
        \ 'DeleteMark'         :  "dm",
        \ 'PurgeMarks'         :  "mda",
        \ 'PurgeMarkers'       :  "m<BS>",
        \ 'GotoNextLineAlpha'  :  "']",
        \ 'GotoPrevLineAlpha'  :  "'[",
        \ 'GotoNextSpotAlpha'  :  "`]",
        \ 'GotoPrevSpotAlpha'  :  "`[",
        \ 'GotoNextLineByPos'  :  "]'",
        \ 'GotoPrevLineByPos'  :  "['",
        \ 'GotoNextSpotByPos'  :  "mn",
        \ 'GotoPrevSpotByPos'  :  "mp",
        \ 'GotoNextMarker'     :  "[+",
        \ 'GotoPrevMarker'     :  "[-",
        \ 'GotoNextMarkerAny'  :  "]=",
        \ 'GotoPrevMarkerAny'  :  "[=",
        \ 'ListLocalMarks'     :  "ms",
        \ 'ListLocalMarkers'   :  "m?"
        \ }

" ----------------------------------------------------
" 根据ctags 进行配置的标识符列表
" ----------------------------------------------------
" ctags for identify list by tag
" 根目录执行: 
" ctags -R --c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v --fields=+liaS --extra=+q --language-force=c++
" 设置 tagbar 子窗口的位置出现在主编辑区的左边 
" let tagbar_left=1 
" 设置显示／隐藏标签列表子窗口的快捷键。速记：identifier list by tag
nnoremap <Leader>ilt :TagbarToggle<CR> 
" 设置标签子窗口的宽度 
let tagbar_width=32 
" tagbar 子窗口中不显示冗余帮助信息 
let g:tagbar_compact=1
" 设置 ctags 对哪些代码标识符生成标签
let g:tagbar_type_cpp = {
    \ 'kinds' : [
         \ 'c:classes:0:1',
         \ 'd:macros:0:1',
         \ 'e:enumerators:0:0', 
         \ 'f:functions:0:1',
         \ 'g:enumeration:0:1',
         \ 'l:local:0:1',
         \ 'm:members:0:1',
         \ 'n:namespaces:0:1',
         \ 'p:functions_prototypes:0:1',
         \ 's:structs:0:1',
         \ 't:typedefs:0:1',
         \ 'u:unions:0:1',
         \ 'v:global:0:1',
         \ 'x:external:0:1'
     \ ],
     \ 'sro'        : '::',
     \ 'kind2scope' : {
         \ 'g' : 'enum',
         \ 'n' : 'namespace',
         \ 'c' : 'class',
         \ 's' : 'struct',
         \ 'u' : 'union'
     \ },
     \ 'scope2kind' : {
         \ 'enum'      : 'g',
         \ 'namespace' : 'n',
         \ 'class'     : 'c',
         \ 'struct'    : 's',
         \ 'union'     : 'u'
     \ }
\ }

" ----------------------------------------------------
" 基于tags的跳转功能
" ----------------------------------------------------
" 基于tags的跳转功能
" 快捷键 g] 显示所有标签，如果标签很多不是很好用
" 使用方式 先 ctrl-] 之后 ;tn ;tp 进行遍历
" ctrl-o 返回上一次光标的位置
" ctrl-t 返回上一次的标签
nmap <Leader>tn :tnext<CR>
" 反向遍历同名标签
nmap <Leader>tp :tprevious<CR>

" ----------------------------------------------------
" 使用插件 减免每次都要ctags命令生成标签
" ----------------------------------------------------
" 设置插件 indexer 调用 ctags 的参数
" indexer 的配置文件是  ~/.indexer_files
" 格式如下:
" [search_federation]
" /data/workplace/federation/search_federation
" 上例设定了工程的根目录，方括号内是对应工程名，路径为工程的代码目录，
" 不要包含构建目录、文档目录，以避免将产生非代码文件的标签信息。
" 这样，从以上目录打开任何代码文件时，indexer 便对整个目录创建标签文件，
" 若代码文件有更新，那么在文件保存时，indexer 将自动调用 ctags 更新标签文件，
" indexer 生成的标签文件以工程名命名，位于 ~/.indexer_files_tags/，并自动引入进 vim
"
" 默认 --c++-kinds=+p+l，重新设置为 --c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v
" 默认 --fields=+iaS 不满足 YCM 要求，需改为 --fields=+iaSl
let g:indexer_ctagsCommandLineOptions="--c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v --fields=+iaSl --extra=+q"

" ----------------------------------------------------
" 代码注释 与 取消注释
" ----------------------------------------------------
" <Leader>cc 代码注释
" <leader>cu 取消选中文本的注释


"
" 内容查找
"
" 内容替换
"
"

" ----------------------------------------------------
" 多文档编辑
" ----------------------------------------------------
" 显示/隐藏 MiniBufExplorer 窗口
map <Leader>bl :MBEToggle<cr>
" buffer 切换快捷键
" ctrl-tab ctrl-shift-tab 必须保证光标在buffer之外
" 否则的话 输出d可以即可将光标移除buffer
map <C-Tab> :MBEbn<cr>
map <C-S-Tab> :MBEbp<cr>
